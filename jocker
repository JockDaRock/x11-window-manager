ARG BASE_IMAGE="ubuntu:18.04"

#########K8S-BUILD###########

# FROM alpine:3.8 AS build

FROM golang:1.11.4 AS build

# When changing kubernetes_version remember to also update:
# - scripts/mk-image-cache-lst and run `make refresh-image-caches` from top-level
# - pkg/e2e-test/Dockerfile

# RUN echo "http://dl-cdn.alpinelinux.org/alpine/edge/community" >> /etc/apk/repositories

COPY clean-install /usr/local/bin/clean-install
RUN chmod +x /usr/local/bin/clean-install

RUN clean-install \
      apt-transport-https ca-certificates curl software-properties-common gnupg2 lsb-release \
      systemd systemd-sysv libsystemd0 \
      conntrack iptables iproute2 ethtool socat util-linux mount ebtables udev kmod aufs-tools \
      bash rsync gcc make git findutils coreutils

ENV kubernetes_version v1.13.0
ENV cni_version        v0.6.0
ENV critools_version   v1.11.1

#RUN apk add -U --no-cache \
#  bash \
#  coreutils \
#  curl \
#  findutils \
#  git \
#  binutils \
#  gcc \
#  go \
#  grep \
#  libc-dev \
#  linux-headers \
#  make \
#  rsync \
#  && true

ENV GOPATH=/go PATH=$PATH:/go/bin

ENV GOOS=linux GOARCH=amd64

### Kubernetes (incl Kubelet)

ENV KUBERNETES_URL https://github.com/kubernetes/kubernetes.git
#ENV KUBERNETES_BRANCH pull/NNN/head
ENV KUBERNETES_COMMIT ${kubernetes_version}
RUN mkdir -p $GOPATH/src/github.com/kubernetes && \
    cd $GOPATH/src/github.com/kubernetes && \
    git clone $KUBERNETES_URL kubernetes
WORKDIR $GOPATH/src/github.com/kubernetes/kubernetes
RUN set -e; \
    if [ -n "$KUBERNETES_BRANCH" ] ; then \
        git fetch origin "$KUBERNETES_BRANCH"; \
    fi; \
    git checkout -q $KUBERNETES_COMMIT

RUN KUBE_BUILD_PLATFORMS=linux/amd64 make WHAT="cmd/kubelet cmd/kubectl cmd/kubeadm"

## Construct final image

#RUN mkdir -p /out/etc/apk && cp -r /etc/apk/* /out/etc/apk/
##coreutils needed for du -B for disk image checks made by kubelet
## example: $ du -s -B 1 /var/lib/kubelet/pods/...
##          du: unrecognized option: B
#RUN apk add --no-cache --initdb -p /out \
#    alpine-baselayout \
#    busybox \
#    ca-certificates \
#    coreutils \
#    curl \
#    ebtables \
#    ethtool \
#    findutils \
#    iproute2 \
#    iptables \
#    musl \
#    openssl \
#    socat \
#    util-linux \
#    nfs-utils \
#    && true

RUN mkdir /out && mkdir /out/usr && mkdir /out/usr/bin/

RUN cp $GOPATH/src/github.com/kubernetes/kubernetes/_output/bin/kubelet /out/usr/bin/kubelet
RUN cp $GOPATH/src/github.com/kubernetes/kubernetes/_output/bin/kubeadm /out/usr/bin/kubeadm
RUN cp $GOPATH/src/github.com/kubernetes/kubernetes/_output/bin/kubectl /out/usr/bin/kubectl

#########ENTRYPOINT-BUILD###########

FROM golang:alpine AS entrypoint

ENV CGO_ENABLED=0 GOOS=linux GOARCH=amd64

ARG ARCH="amd64"

WORKDIR /

COPY entrypoint/main.go .

RUN go build -o entrypoint main.go

RUN apk update && apk add git

WORKDIR /

RUN go get github.com/julienschmidt/httprouter

COPY get_config.go .

COPY commandModels ./commandModels

RUN go build -o get_config get_config.go

RUN go get github.com/yudai/gotty

#########GO-SERVICE-BUILD###########

#FROM golang:alpine AS golang
#
#ENV CGO_ENABLED=0 GOOS=linux GOARCH=amd64
#
#RUN apk update && apk add git
#
#WORKDIR /
#
#RUN go get github.com/julienschmidt/httprouter
#
#COPY get_config.go .
#COPY commandModels ./commandModels
#
#RUN go build -o get_config get_config.go
#
#RUN go get github.com/yudai/gotty

FROM ${BASE_IMAGE}
# NOTE: ARCH must be defined again after FROM
# https://docs.docker.com/engine/reference/builder/#scope
ARG ARCH="amd64"

# setting DEBIAN_FRONTEND=noninteractive stops some apt warnings, this is not 
# a real argument, we're (ab)using ARG to get a temporary ENV again.
ARG DEBIAN_FRONTEND=noninteractive

COPY clean-install /usr/local/bin/clean-install
RUN chmod +x /usr/local/bin/clean-install

# Get dependencies
# The base image already has: ssh, apt, snapd
# This is broken down into (each on a line):
# - packages necessary for installing docker
# - packages needed to run services (systemd)
# - packages needed for docker / hyperkube / kubernetes components
# - misc packages (utilities we use in our own tooling)
# Then we cleanup (removing unwanted systemd services)
# Finally we disable kmsg in journald
# https://developers.redhat.com/blog/2014/05/05/running-systemd-within-docker-container/
RUN clean-install \
      apt-transport-https ca-certificates curl software-properties-common gnupg2 lsb-release \
      systemd systemd-sysv libsystemd0 \
      conntrack iptables iproute2 ethtool socat util-linux mount ebtables udev kmod aufs-tools \
      bash rsync \
    && find /lib/systemd/system/sysinit.target.wants/ -name "systemd-tmpfiles-setup.service" -delete \
    && rm -f /lib/systemd/system/multi-user.target.wants/* \
    && rm -f /etc/systemd/system/*.wants/* \
    && rm -f /lib/systemd/system/local-fs.target.wants/* \
    && rm -f /lib/systemd/system/sockets.target.wants/*udev* \
    && rm -f /lib/systemd/system/sockets.target.wants/*initctl* \
    && rm -f /lib/systemd/system/basic.target.wants/* \
    && echo "ReadKMsg=no" >> /etc/systemd/journald.conf

# Install docker, which needs to happen after we install some of the packages above
# based on https://docs.docker.com/install/linux/docker-ce/ubuntu/#set-up-the-repository
# and https://kubernetes.io/docs/setup/independent/install-kubeadm/#installing-docker
# - get docker's GPG key
# - add the fingerprint
# - add the repository
# - update apt, install docker, cleanup
# NOTE: 18.06 is officially supported by Kubernetes currently, so we pin to that.
# https://kubernetes.io/docs/tasks/tools/install-kubeadm/
ARG DOCKER_VERSION="18.06.*"
# another temporary env, not a real argument. setting this to a non-zero value
# silences this warning from apt-key:
# "Warning: apt-key output should not be parsed (stdout is not a terminal)"
ARG APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE="false"
RUN curl -fsSL "https://download.docker.com/linux/$(. /etc/os-release; echo "$ID")/gpg" | apt-key add - \
    && apt-key fingerprint 0EBFCD88 \
    && ARCH="${ARCH}" add-apt-repository \
        "deb [arch=${ARCH}] https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") $(lsb_release -cs) stable" \
    && clean-install "docker-ce=${DOCKER_VERSION}"

# Install CNI binaries to /opt/cni/bin
# TODO(bentheelder): doc why / what here
ARG CNI_VERSION="0.6.0"
ARG CNI_TARBALL="cni-plugins-${ARCH}-v${CNI_VERSION}.tgz"
ARG CNI_BASE_URL="https://storage.googleapis.com/kubernetes-release/network-plugins/"
ARG CNI_URL="${CNI_BASE_URL}${CNI_TARBALL}"
RUN curl -sSL --retry 5 --output /tmp/cni.tgz "${CNI_URL}" \
    && sha256sum /tmp/cni.tgz \
    && mkdir -p /opt/cni/bin \
    && tar -C /opt/cni/bin -xzf /tmp/cni.tgz \
    && rm -rf /tmp/cni.tgz

# tell systemd that it is in docker (it will check for the container env)
# https://www.freedesktop.org/wiki/Software/systemd/ContainerInterface/
# ENV container docker

# systemd exits on SIGRTMIN+3, not SIGTERM (which re-executes it)
# https://bugzilla.redhat.com/show_bug.cgi?id=1201657
STOPSIGNAL SIGRTMIN+3


COPY --from=entrypoint /entrypoint /usr/local/bin/entrypoint

COPY --from=entrypoint /get_config /usr/local/bin/get_config
RUN chmod +x /usr/local/bin/get_config

COPY --from=entrypoint /go/bin/gotty /usr/local/bin/gotty

COPY --from=build /out/usr/bin/kubelet /usr/local/bin/kubelet
RUN chmod +x /usr/local/bin/kubelet

COPY --from=build /out/usr/bin/kubeadm /usr/local/bin/kubeadm
RUN chmod +x /usr/local/bin/kubeadm

COPY --from=build /out/usr/bin/kubectl /usr/local/bin/kubectl
RUN chmod +x /usr/local/bin/kubectl

COPY kubelet.service /etc/systemd/system/kubelet.service
COPY 10-kubeadm.conf /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
COPY get_config.service /etc/systemd/system/get_config.service

COPY kubelet-config.yml /kubelet-config.yml

COPY kube-start.sh /usr/bin/kube-start.sh

RUN chmod +x /usr/bin/kube-start.sh

RUN systemctl enable kubelet
RUN systemctl enable get_config

# ENTRYPOINT [ "/usr/local/bin/entrypoint", "/sbin/init" ]

# USER root

ENTRYPOINT [ "/sbin/init" ]

VOLUME [ "/var/lib/docker" ]
